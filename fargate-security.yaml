AWSTemplateFormatVersion: 2010-09-09

Description: >
  Common security groups.

Parameters:
  ServiceName:
    Type: String
  VPC:
    Type: AWS::EC2::VPC::Id
  LoadBalancerPort:
    Type: String
    Default: 80
  ContainerPort:
    Type: String
    Default: 80

Resources:

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['', [!Ref ServiceName, "-LoadBalancerSecurityGroup"]]
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref LoadBalancerPort
          ToPort: !Ref LoadBalancerPort
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref ServiceName, "-LoadBalancerSecurityGroup"]]

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Join ['', [!Ref ServiceName, "-Container"]]
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
      Tags:
        - Key: Name
          Value: !Join ['', [!Ref ServiceName, "-Container"]]

  ContainerSecurityGroupInternalIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties: 
      GroupId: !Ref ContainerSecurityGroup
      Description: MySQL within group
      IpProtocol: tcp
      FromPort: 3306
      ToPort: 3306
      SourceSecurityGroupId: !Ref ContainerSecurityGroup

Outputs:
  ContainerSecurityGroup:
    Value: !GetAtt ContainerSecurityGroup.GroupId
  LoadBalancerSecurityGroup:
    Value: !GetAtt LoadBalancerSecurityGroup.GroupId